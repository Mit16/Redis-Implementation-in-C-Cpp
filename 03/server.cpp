#include <iostream>
#include <cassert>
#include <vector>
#include <cstring>
#include <cerrno>
#include <unistd.h>
#include <fcntl.h>
#include <poll.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <cstddef>
#include <map>
#include "hashtable.h"

using namespace std;

#define PORT 8080
const size_t k_max_msg = 32 << 20;    // 32 MB
const size_t k_max_args = 200 * 1000; // Maximum number of arguments in a request
typedef vector<uint8_t> Buffer;

#define container_of(ptr, T, member) \
    ((T *)((char *)ptr - offsetof(T, member)))

// Connection state
struct Conn
{
    int fd = -1;
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    Buffer incoming; // Data to be parsed by the application
    Buffer outgoing; // Responses generated by the application
};

// Logging and error handling
static void msg(const char *msg)
{
    cerr << msg << endl;
}

static void msg_errno(const char *msg)
{
    cerr << "[errno:" << errno << "] " << msg << endl;
}

static void die(const char *msg)
{
    msg_errno(msg);
    exit(EXIT_FAILURE);
}

// Set a file descriptor to non-blocking mode
static void fd_set_nb(int fd)
{
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags < 0)
    {
        die("fcntl(F_GETFL) failed");
    }
    if (fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0)
    {
        die("fcntl(F_SETFL) failed");
    }
}

// append to the block
static void buf_append(Buffer &buf, const uint8_t *data, size_t len)
{
    buf.insert(buf.end(), data, data + len);
}

// remove from the front
static void buf_consume(Buffer &buf, size_t n)
{
    buf.erase(buf.begin(), buf.begin() + n);
}

// Handle new connections
static Conn *handle_accept(int fd)
{
    struct sockaddr_in client_addr = {};
    socklen_t socklen = sizeof(client_addr);
    int connfd = accept(fd, (struct sockaddr *)&client_addr, &socklen);
    if (connfd < 0)
    {
        msg_errno("accept() failed");
        return nullptr;
    }

    // Set the new connection to non-blocking mode
    fd_set_nb(connfd);

    // Create a new connection object
    Conn *conn = new Conn();
    conn->fd = connfd;
    conn->want_read = true; // Start by reading the first request
    return conn;
}

// Helper functions for parsing requests
static bool read_u32(const uint8_t *&cur, const uint8_t *end, uint32_t &out)
{
    if (cur + 4 > end)
    {
        return false;
    }
    memcpy(&out, cur, 4);
    cur += 4;
    return true;
}

static bool read_str(const uint8_t *&cur, const uint8_t *end, size_t n, string &out)
{
    if (cur + n > end)
    {
        return false;
    }
    out.assign(cur, cur + n);
    cur += n;
    return true;
}

// Parse a Redis-like request into a list of strings
static int32_t parse_req(const uint8_t *data, size_t size, vector<string> &out)
{
    const uint8_t *end = data + size;
    uint32_t nstr = 0;
    if (!read_u32(data, end, nstr))
    {
        return -1;
    }
    if (nstr > k_max_args)
    {
        return -1; // Safety limit
    }

    while (out.size() < nstr)
    {
        uint32_t len = 0;
        if (!read_u32(data, end, len))
        {
            return -1;
        }
        out.push_back(string());
        if (!read_str(data, end, len, out.back()))
        {
            return -1;
        }
    }
    if (data != end)
    {
        return -1; // Trailing garbage
    }
    return 0;
}

// error code for TAG_ERR
enum
{
    ERR_UNKNOWN = 1, // unknowm command
    ERR_TOO_BIG = 2, // response too big
};

enum
{
    TAG_NIL = 0, // nil
    TAG_ERR = 1, // error code + msg
    TAG_STR = 2, // string
    TAG_INT = 3, // int64
    TAG_DBL = 4, // double
    TAG_ARR = 5, // array
};

// help functions for the serialization
static void buf_append_u8(Buffer &buf, uint8_t data)
{
    buf.push_back(data);
}

static void buf_append_u32(Buffer &buf, uint32_t data)
{
    buf_append(buf, (const uint8_t *)&data, 4);
}

static void buf_append_i64(Buffer &buf, int64_t data)
{
    buf_append(buf, (const uint8_t *)&data, 8);
}

static void buf_append_dbl(Buffer &buf, double data)
{
    buf_append(buf, (const uint8_t *)&data, 8);
}

// append serialized data types to the back
static void out_nil(Buffer &out)
{
    buf_append_u8(out, TAG_NIL);
}

static void out_str(Buffer &out, const char *s, size_t size)
{
    buf_append_u8(out, TAG_STR);
    buf_append_u32(out, (uint32_t)size);
    buf_append(out, (const uint8_t *)s, size);
}

static void out_int(Buffer &out, int64_t val)
{
    buf_append_u8(out, TAG_INT);
    buf_append_i64(out, val);
}

static void out_dbl(Buffer &out, double val)
{
    buf_append_u8(out, TAG_DBL);
    buf_append_dbl(out, val);
}

static void out_err(Buffer &out, uint32_t code, const string &msg)
{
    buf_append_u8(out, TAG_ERR);
    buf_append_u32(out, code);
    buf_append_u32(out, (uint32_t)msg.size());
    buf_append(out, (const uint8_t *)msg.data(), msg.size());
}

static void out_arr(Buffer &out, uint32_t n)
{
    buf_append_u8(out, TAG_ARR);
    buf_append_u32(out, n);
}

// global states
static struct
{
    HMap db; // top-level hashtable
} g_data;

// KV pair for the top-level hashtable
struct Entry
{
    struct HNode node; // hashtable node
    string key;
    string val;
};

// equality comparison for 'struct Entry'
static bool entry_eq(HNode *lhs, HNode *rhs)
{
    struct Entry *le = container_of(lhs, struct Entry, node);
    struct Entry *re = container_of(rhs, struct Entry, node);
    return le->key == re->key;
}

// FNV hash
static uint64_t str_hash(const uint8_t *data, size_t len)
{
    uint32_t h = 0x811C9DC5;
    for (size_t i = 0; i < len; i++)
    {
        h = (h + data[i]) * 0x01000193;
    }
    return h;
}

static void do_get(vector<string> &cmd, Buffer &out)
{
    // a dummy `Entry` just for the lookup
    Entry key;
    key.key.swap(cmd[1]);
    key.node.hcode = str_hash((uint8_t *)key.key.data(), key.key.size());
    // hashtable lookup
    HNode *node = hm_lookup(&g_data.db, &key.node, &entry_eq);
    if (!node)
    {
        return out_nil(out);
    }
    // copy the value
    const string &val = container_of(node, Entry, node)->val;
    return out_str(out, val.data(), val.size());
}

static void do_set(vector<string> &cmd, Buffer &out)
{
    // a dummy `Entry` for the lookup
    Entry key;
    key.key.swap(cmd[1]);
    key.node.hcode = str_hash((uint8_t *)key.key.data(), key.key.size());

    // hashtable lookup
    HNode *node = hm_lookup(&g_data.db, &key.node, &entry_eq);
    if (node)
    {
        // found, update the value
        container_of(node, Entry, node)->val.swap(cmd[2]);
    }
    else
    {
        // not found, allocate & insert a new pair
        Entry *ent = new Entry();
        ent->key.swap(key.key);
        ent->node.hcode = key.node.hcode;
        ent->val.swap(cmd[2]);
        hm_insert(&g_data.db, &ent->node);
    }

    // Return "OK" as a response
    return out_str(out, "OK", 2);
}

static void do_del(vector<string> &cmd, Buffer &out)
{
    Entry key;
    key.key.swap(cmd[1]);
    key.node.hcode = str_hash((uint8_t *)key.key.data(), key.key.size());

    HNode *node = hm_delete(&g_data.db, &key.node, &entry_eq);
    if (node)
    {
        delete container_of(node, Entry, node);
        return out_str(out, "1", 1); // Success
    }
    else
    {
        return out_str(out, "0", 1); // Failure
    }
}

static bool cb_keys(HNode *node, void *arg)
{
    Buffer &out = *(Buffer *)arg;
    const string &key = container_of(node, Entry, node)->key;
    out_str(out, key.data(), key.size());
    return true;
}

static bool do_keys(vector<string> &, Buffer &out)
{
    out_arr(out, (uint32_t)hm_size(&g_data.db));
    hm_foreach(&g_data.db, &cb_keys, (void *)&out);
    return true;
}

// Process a command and generate a response
static void do_request(vector<string> &cmd, Buffer &out)
{
    if (cmd.size() == 2 && cmd[0] == "get")
    {
        do_get(cmd, out);
    }
    else if (cmd.size() == 3 && cmd[0] == "set")
    {
        do_set(cmd, out);
    }
    else if (cmd.size() == 2 && cmd[0] == "del")
    {
        do_del(cmd, out);
    }
    else if (cmd.size() == 1 && cmd[0] == "keys")
    {
        do_keys(cmd, out);
    }
    else if (cmd.size() == 1 && cmd[0] == "quit")
    {
        // Handle the quit command
        out_str(out, "BYE", 3); // Send a goodbye message
    }
    else
    {
        return out_err(out, ERR_UNKNOWN, "Unknown command.");
    }
}

static void response_begin(Buffer &out, size_t *header)
{
    *header = out.size();   // message header position
    buf_append_u32(out, 0); // reserve space
}

static size_t response_size(Buffer &out, size_t header)
{
    return out.size() - header - 4;
}

static void response_end(Buffer &out, size_t header)
{
    size_t msg_size = response_size(out, header);
    if (msg_size > k_max_msg)
    {
        out.resize(header + 4);
        out_err(out, ERR_TOO_BIG, "response is too big");
        msg_size = response_size(out, header);
    }

    // message header
    uint32_t len = (uint32_t)msg_size;
    memcpy(&out[header], &len, 4);
}

// Process one request if there is enough data
static bool try_one_request(Conn *conn)
{
    // Try to parse the protocol: message header
    if (conn->incoming.size() < 4)
    {
        return false; // Need more data
    }
    uint32_t len = 0;
    memcpy(&len, conn->incoming.data(), 4);
    if (len > k_max_msg)
    {
        msg("too long");
        conn->want_close = true;
        return false; // Want close
    }
    // Message body
    if (4 + len > conn->incoming.size())
    {
        return false; // Need more data
    }
    const uint8_t *request = &conn->incoming[4];

    // Parse the request into a list of strings
    vector<string> cmd;
    if (parse_req(request, len, cmd) < 0)
    {
        msg("bad request");
        conn->want_close = true;
        return false; // Want close
    }

    // Process the command and generate a response
    size_t header_pos = 0;
    response_begin(conn->outgoing, &header_pos);
    do_request(cmd, conn->outgoing);
    response_end(conn->outgoing, header_pos);

    // Remove the processed message from the incoming buffer
    buf_consume(conn->incoming, 4 + len);
    return true; // Success
}

// Handle read events
static void handle_read(Conn *conn)
{
    // Perform a non-blocking read
    uint8_t buf[4096];
    ssize_t rv = read(conn->fd, buf, sizeof(buf));
    if (rv < 0 && errno == EAGAIN)
    {
        return; // Not ready yet
    }
    if (rv < 0)
    {
        msg_errno("read() failed");
        conn->want_close = true;
        return;
    }
    if (rv == 0)
    {
        msg("Client closed connection");
        conn->want_close = true;
        return;
    }

    // Append the new data to the incoming buffer
    buf_append(conn->incoming, buf, rv);

    // Process requests from the buffer
    while (try_one_request(conn))
    {
    }

    // Update the connection state
    if (conn->outgoing.size() > 0)
    {
        conn->want_read = false;
        conn->want_write = true;
    }
}

// Handle write events
static void handle_write(Conn *conn)
{
    // Perform a non-blocking write
    ssize_t rv = write(conn->fd, conn->outgoing.data(), conn->outgoing.size());
    if (rv < 0 && errno == EAGAIN)
    {
        return; // Not ready yet
    }
    if (rv < 0)
    {
        msg_errno("write() failed");
        conn->want_close = true;
        return;
    }

    // Remove the written data from the outgoing buffer
    buf_consume(conn->outgoing, rv);

    // Update the connection state
    if (conn->outgoing.size() == 0)
    {
        conn->want_write = false;
        conn->want_read = true;
    }
}

int main()
{
    // Create the listening socket
    int fd = socket(AF_INET, SOCK_STREAM, 0);
    if (fd < 0)
    {
        die("socket() failed");
    }

    // Set socket options
    int val = 1;
    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val));

    // Bind the socket
    struct sockaddr_in addr = {};
    addr.sin_family = AF_INET;
    addr.sin_port = htons(PORT);
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
    if (bind(fd, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        die("bind() failed");
    }

    // Set the listening socket to non-blocking mode
    fd_set_nb(fd);

    // Start listening
    if (listen(fd, SOMAXCONN) < 0)
    {
        die("listen() failed");
    }

    cout << "Server listening on port " << PORT << endl;

    // Map of all client connections, keyed by file descriptor
    vector<Conn *> fd2conn;

    // Event loop
    while (true)
    {
        // Prepare the arguments for poll()
        vector<pollfd> poll_args;
        pollfd pfd = {fd, POLLIN, 0};
        poll_args.push_back(pfd);

        // Add connection sockets to the poll list
        for (Conn *conn : fd2conn)
        {
            if (!conn)
                continue;
            pollfd pfd = {conn->fd, POLLERR, 0};
            if (conn->want_read)
                pfd.events |= POLLIN;
            if (conn->want_write)
                pfd.events |= POLLOUT;
            poll_args.push_back(pfd);
        }

        // Wait for socket readiness
        int rv = poll(poll_args.data(), poll_args.size(), -1);
        if (rv < 0 && errno == EINTR)
        {
            continue; // Retry on interrupt
        }
        if (rv < 0)
        {
            die("poll() failed");
        }

        // Handle the listening socket
        if (poll_args[0].revents)
        {
            if (Conn *conn = handle_accept(fd))
            {
                if (fd2conn.size() <= (size_t)conn->fd)
                {
                    fd2conn.resize(conn->fd + 1);
                }
                fd2conn[conn->fd] = conn;
            }
        }

        // Handle connection sockets
        for (size_t i = 1; i < poll_args.size(); ++i)
        {
            uint32_t ready = poll_args[i].revents;
            Conn *conn = fd2conn[poll_args[i].fd];
            if (ready & POLLIN)
                handle_read(conn);
            if (ready & POLLOUT)
                handle_write(conn);
            if ((ready & POLLERR) || conn->want_close)
            {
                close(conn->fd);
                fd2conn[conn->fd] = nullptr;
                delete conn;
            }
        }
    }

    return 0;
}